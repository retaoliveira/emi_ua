#            Exemplo: pattern = c("´", "^") retirará os acentos agudos e circunflexos apenas.
#            Outras palavras aceitas: "all" (retira todos os acentos, que são "´", "`", "^", "~", "¨", "ç")
if(!is.character(str))
str <- as.character(str)
pattern <- unique(pattern)
if(any(pattern=="Ç"))
pattern[pattern=="Ç"] <- "ç"
symbols <- c(
acute = "áéíóúÁÉÍÓÚýÝ",
grave = "àèìòùÀÈÌÒÙ",
circunflex = "âêîôûÂÊÎÔÛ",
tilde = "ãõÃÕñÑ",
umlaut = "äëïöüÄËÏÖÜÿ",
cedil = "çÇ"
)
nudeSymbols <- c(
acute = "aeiouAEIOUyY",
grave = "aeiouAEIOU",
circunflex = "aeiouAEIOU",
tilde = "aoAOnN",
umlaut = "aeiouAEIOUy",
cedil = "cC"
)
accentTypes <- c("´","`","^","~","¨","ç")
if(any(c("all","al","a","todos","t","to","tod","todo")%in%pattern)) # opcao retirar todos
return(chartr(paste(symbols, collapse=""), paste(nudeSymbols, collapse=""), str))
for(i in which(accentTypes%in%pattern))
str <- chartr(symbols[i],nudeSymbols[i], str)
return(str)
}
i <- 1
j <- 1
for (i in 1:length(data_q1)) {
for (j in 1:nrow(data_q1)){
data_q1[j,i] <- rm_accent(data_q1[j,i])
data_q1[j,i] <- tolower(data_q1[j,i])
data_q1[j,i] <- str_squish(data_q1[j,i])
}}
#write_csv(data_q1, "F:/Dropbox/Lili/questionario_01/data/data_q1.csv")
data_q2 <- as_tibble(sapply(data_q2, function(x) {str_replace(x, "," , "")})) #remover quaisquer vírgulas no texto
#Troca valores de Belo Horizonte varrendo colunas
bh <- c("bh", "Bh", "BH", "belo horizonte", "belo Horizonte", "Belo Horizonte - MG", "Belo horizonte", "BELO HORIZONTE", "BELO HORIZNTE", "Belo Horizonte-MG", "Belo Horizonte, Minas Gerais", "Belo Horizonte,Minas Gerais", "BELO HORIOZNTE", "Belo Horizonte mg", "Belo Horizonte Minas Gerais", "Beo horizonte")
i <- 1
for (i in 1:length(bh)){
data_q2 <- as_tibble(sapply(data_q2, function(x) {str_replace(x, bh[i], "Belo Horizonte")}))
}
#Limpar caracteres especiais varrendo colunas
i <- 1
j <- 1
for (i in 1:length(data_q2)) {
for (j in 1:nrow(data_q2)){
data_q2[j,i] <- rm_accent(data_q2[j,i])
data_q2[j,i] <- tolower(data_q2[j,i])
data_q2[j,i] <- str_squish(data_q2[j,i])
}}
#write_csv(data_q2, "F:/Dropbox/Lili/questionario_02/data/data_q2.csv")
# dados da análise preliminar q1
data_q1 <- data_q1[,-c(1, 10, 13:14, 21, 24, 25)]
data_q1 <- data_q1[,-c(42:46)]
data_q1_col <- c("cidade",
"situacao",
"profissao",
"freq_trab", # dados de trabalho
"modo_trab",
"dist_trab",
"iso_trab",
"alter_trab",
"continuaria_trab",
"alter_desl_trab",
"estudo", # dados de estudo
"freq_est",
"modo_est",
"dist_est",
"iso_est",
"alter_est",
"continuaria_est",
"alter_desl_est",
"freq_todos_dias", # dados de compra
"freq_final_sem",
"freq_diariamente",
"freq_1_mais_sem",
"freq_1_mais_mes",
"freq_menos_1_mes",
"freq_nunca_dist",
"freq_nunca",
"soluc_nao_realizada",
"soluc_rotina",
"soluc_reduz_freq_desloc",
"soluc_compra_site",
"soluc_compra_app",
"soluc_compra_estab_app",
"soluc_online",
"soluc_prep_so_casa",
"soluc_prep_casa",
"continua_substit",
"continua_freq",
"continua_vez_quando",
"continua_so_impossibi",
"continua_nao_mesmo_iso",
"continua_nao_sem_desloc"
)
names(data_q1) <- data_q1_col
#write_csv(data_q1,"D:/Dropbox/Lili/questionario_01/data/data_q1.csv" )
# dados análise preliminar q2
# q2 já está resolvido
# Vetor com os nomes das colunas a serem criadas
col8 <- c("Home office",
"Divulgação do serviço por redes sociais e outros canais da internet",
"Atendimento online dos meus clientes",
"De acordo com o que o cliente pede",
"Escala minima de trabalho",
"Minhas atividades são exclusivamente realizadas in loco",
"Trabalho com prestação de serviços",
"Trabalho só meio período",
"Nenhum",
"Não adotei",
"Serviço de entrega dos meus produtos")
col8 <- rm_accent(col8)
col8 <- tolower(col8)
col8 <- str_squish(col8)
col8n <- 8:18 # vetor para varrer colunas que devem ser preenchidas
data_q1 <- data_q1 %>%
mutate(alter_trab_col = alter_trab) %>% # copia coluna que será separada para depois consultar e preencher
separate(alter_trab, col8, sep = ";") # cria colunas com opções
k = 8
for (k in 8:18) {
data_q1[,k] <- as.numeric(as.character(data_q1[,k])) # preenche com NA e tira classe das colunas "character"
}
# Procura na coluna original os termos no vetor col8 (`grepl`). Caso TRUE, retorna 1 na coluna de índice j. Caso negativo, 0.
i = 1
j = 1
for (i in 1:nrow(data_q1)){
for (j in 1:length(col8n)){
if (grepl(col8[j], data_q1[i,52])) {
data_q1[i,col8n[j]] <- 1
}
else data_q1[i,col8n[j]] <- 0
}
}
# Vetor com os nomes das colunas a serem criadas
col20 <- c("Mudei o horário do deslocamento",
"Alterei a frequência de realização da atividade: saio menos vezes para essa atividade",
"Alterei a frequência de realização da atividade: saio mais vezes para essa atividade",
"Alterei o local de destino: estou percorrendo distâncias maiores",
"Estamos em Isolamento (no trabalho)",
"Continuo na mesma frequência",
"Não estou me deslocando para atividades de trabalho",
"Quando houve necessidade de deslocamento utilizei meu próprio veículo",
"Somente a questão da alimentação que adotei serviços de entrega",
"Nenhum",
"Usei outro modo de transporte: deixei de usar transporte coletivo para usar transporte individual",
"Usei outro modo de transporte: deixei de usar transporte motorizado individual para usar bicicleta ou andar a pé",
"No caso quando saio para compras fundamentais"
)
col20 <- rm_accent(col20)
col20 <- tolower(col20)
col20 <- str_squish(col20)
col20n <- 20:32 # vetor para varrer colunas que devem ser preenchidas
data_q1 <- data_q1 %>%
mutate(alter_desl_trab_col = alter_desl_trab) %>% # copia coluna que será separada para depois consultar e preencher
separate(alter_desl_trab, col20, sep = ";") # cria colunas com opções
k = 20
for (k in 20:32) {
data_q1[,k] <- as.numeric(as.character("NA")) # preenche com NA e tira classe das colunas "character"
}
# Procura na coluna original os termos no vetor col11 (`grepl`). Caso TRUE, retorna 1 na coluna de índice j. Caso negativo, 0.
i = 1
j = 1
for (i in 1:nrow(data_q1)){
for (j in 1:length(col20n)){
if (grepl(col20[j], data_q1[i,64])) {
data_q1[i,col20n[j]] <- 1
}
else data_q1[i,col20n[j]] <- 0
}
}
# Vetor com os nomes das colunas a serem criadas
col37 <- c("A instituição adotou ensino à distância",
"Estou buscando realizar estudo independentes",
"Iniciei novo curso online"
)
col37 <- rm_accent(col37)
col37 <- tolower(col37)
col37 <- str_squish(col37)
col37n <- 37:39 # vetor para varrer colunas que devem ser preenchidas
data_q1<- data_q1 %>%
mutate(alter_est_col = alter_est) %>% # copia coluna que será separada para depois consultar e preencher
separate(alter_est, col37, sep = ";") # cria colunas com opções
k = 37
for (k in 37:39) {
data_q1[,k] <- as.numeric(as.character("NA")) # preenche com NA e tira classe das colunas "character"
}
# Procura na coluna original os termos no vetor col11 (`grepl`). Caso TRUE, retorna 1 na coluna de índice j. Caso negativo, 0.
i = 1
j = 1
for (i in 1:nrow(data_q1)){
for (j in 1:length(col37n)){
if (grepl(col37[j], data_q1[i,67])) {
data_q1[i,col37n[j]] <- 1
}
else data_q1[i,col37n[j]] <- 0
}
}
# Vetor com os nomes das colunas a serem criadas
col41 <- c("Não estou me deslocando para atividades de estudo",
"Alterei a frequência de realização da atividade: saio menos vezes para essa atividade",
"Alterei o local de destino: estou percorrendo distâncias menores",
"Usei outro modo de transporte: deixei de usar transporte coletivo para usar bicicleta ou andar a pé"
)
col41 <- rm_accent(col41)
col41 <- tolower(col41)
col41 <- str_squish(col41)
col41n <- 41:44 # vetor para varrer colunas que devem ser preenchidas
data_q1 <- data_q1 %>%
mutate(alter_desl_est_col = alter_desl_est) %>% # copia coluna que será separada para depois consultar e preencher
separate(alter_desl_est, col41, sep = ";") # cria colunas com opções
k = 41
for (k in 41:44) {
data_q1[,k] <- as.numeric(as.character("NA")) # preenche com NA e tira classe das colunas "character"
}
# Procura na coluna original os termos no vetor col11 (`grepl`). Caso TRUE, retorna 1 na coluna de índice j. Caso negativo, 0.
i = 1
j = 1
for (i in 1:nrow(data_q1)){
for (j in 1:length(col41n)){
if (grepl(col41[j], data_q1[i,70])) {
data_q1[i,col41n[j]] <- 1
}
else data_q1[i,col41n[j]] <- 0
}
}
# reordenar o que ficou fora.
data_q1 <- subset(data_q1, select=c(1:18,20:31,19,32:39,41:44,40,45:70))
# Salvar data_q1
#write.csv(data_q1, file = "D:/Dropbox/Lili/questionario_01/data/data_q1.csv")
data_q1 <- mutate(data_q1, mudanca_trab = case_when(
iso_trab == "nao consegui realizar a atividade." ~ "nao realizada",
iso_trab == "sim|mantive as mesmas atividades|com a mesma rotina habitual." ~ "nenhuma mudanca",
iso_trab == "parcialmente|com alteracoes significativas em relacao as atividades anteriores" ~ "realizada com alternativa ou alteracao de rotina",
iso_trab == "sim|de maneira alternativa|sem sair de casa." ~ "realizada com alternativa ou alteracao de rotina",
iso_trab == "a atividade foi interrompida no periodo de isolamento." ~ "interrompida",
iso_trab == "sim|saindo de casa|mas com alteracao da rotina habitual de deslocamento." ~ "realizada com alternativa ou alteracao de rotina"))
data_q1 <- mutate(data_q1, mudanca_est = case_when(
iso_est == "nao consegui realizar a atividade." ~ "nao realizada",
iso_est == "sim|mantive as mesmas atividades|com a mesma rotina habitual." ~ "nenhuma mudanca",
iso_est == "parcialmente|com alteracoes significativas em relacao as atividades anteriores" ~ "realizada com alternativa ou alteracao de rotina",
iso_est == "sim|de maneira alternativa|sem sair de casa." ~ "realizada com alternativa ou alteracao de rotina",
iso_est == "a atividade foi interrompida no periodo de isolamento." ~ "interrompida",
iso_est == "sim|saindo de casa|mas com alteracao da rotina habitual de deslocamento." ~ "realizada com alternativa ou alteracao de rotina"))
# q2
data_q2 <- mutate(data_q2, mudanca_trab = case_when(
mudanca_trabalho == "1" ~ "nenhuma mudanca",
mudanca_trabalho == "2" ~ "realizada com alternativa ou alteracao de rotina",
mudanca_trabalho == "3" ~ "realizada com alternativa ou alteracao de rotina",
mudanca_trabalho == "4" ~ "realizada com alternativa ou alteracao de rotina",
mudanca_trabalho == "5" ~ "interrompida",
mudanca_trabalho == "6" ~ "nao realizada",
mudanca_trabalho == "7" ~ "NA"
))
data_q2 <- mutate(data_q2, mudanca_est = case_when(
mudanca_estudo == "1" ~ "nenhuma mudanca",
mudanca_estudo == "2" ~ "realizada com alternativa ou alteracao de rotina",
mudanca_estudo == "3" ~ "realizada com alternativa ou alteracao de rotina",
mudanca_estudo == "4" ~ "realizada com alternativa ou alteracao de rotina",
mudanca_estudo == "5" ~ "interrompida",
mudanca_estudo == "6" ~ "nao realizada",
mudanca_estudo == "7" ~ "NA"
))
data_q1 <- mutate(data_q1, apos_trab = case_when(
continuaria_trab == "apenas em casos de impossibilidade de deslocamento."	 ~ "contrario",
continuaria_trab == "nao possuo autonomia para essa decisao|mas gostaria de alternativas que reduzam necessidade de deslocamento."	 ~ "sem autonomia",
continuaria_trab == "sim|com frequencia|para realizar essa atividade. (reduzirei em mais da metade os deslocamentos para o trabalho)"	 ~ "favoravel",
continuaria_trab == "sim|de vez em quando para realizar essa atividade. (reduzirei em menos da metade os deslocamentos para o trabalho.)"	 ~ "favoravel",
continuaria_trab == "nao possuo autonomia para essa decisao|mas nao gostaria de alternativas que reduzam necessidade de deslocamento." ~ "sem autonomia",
continuaria_trab == "sim|substituirei os deslocamentos futuros para essa atividade." ~ "favoravel",
continuaria_trab == "nao|mesmo em caso de impossibilidade de deslocamento e enquanto durar o isolamento nao repetirei." ~ "contrario",
continuaria_trab == "nao foi possivel realizar a atividade sem me deslocar" ~ "necessidade de deslocamento"))
data_q1 <- mutate(data_q1, apos_est = case_when(
continuaria_est == "apenas em casos de impossibilidade de deslocamento."	 ~ "contrario",
continuaria_est == "nao possuo autonomia para essa decisao|mas gostaria de alternativas que reduzam necessidade de deslocamento."	 ~ "sem autonomia",
continuaria_est == "sim|com frequencia|para realizar essa atividade. (reduzirei em mais da metade os deslocamentos para atividades de estudo.)"	 ~ "favoravel",
continuaria_est == "sim|de vez em quando para realizar essa atividade. (reduzirei em menos da metade os deslocamentos para atividades de estudo.)"	 ~ "favoravel",
continuaria_est == "nao possuo autonomia para essa decisao|mas nao gostaria de alternativas que reduzam necessidade de deslocamento." ~ "sem autonomia",
continuaria_est == "sim|substituirei os deslocamentos futuros para essa atividade." ~ "favoravel",
continuaria_est == "nao|mesmo em caso de impossibilidade de deslocamento e enquanto durar o isolamento nao repetirei." ~ "contrario",
continuaria_est == "nao foi possivel realizar a atividade sem me deslocar" ~ "necessidade de deslocamento"))
# q2
data_q2 <- mutate(data_q2, apos_trab = case_when(
apos_mudancas_trabalho == "1" ~ "necessidade de deslocamento",
apos_mudancas_trabalho == "2" ~ "favoravel",
apos_mudancas_trabalho == "3" ~ "sem autonomia",
apos_mudancas_trabalho == "4" ~ "contrario",
apos_mudancas_trabalho == "5" ~ "contrario",
apos_mudancas_trabalho == "6" ~ "NA"
))
data_q2 <- mutate(data_q2, apos_est = case_when(
apos_mudancas_estudo == "1" ~ "necessidade de deslocamento",
apos_mudancas_estudo == "2" ~ "favoravel",
apos_mudancas_estudo == "3" ~ "sem autonomia",
apos_mudancas_estudo == "4" ~ "contrario",
apos_mudancas_estudo == "5" ~ "contrario",
apos_mudancas_estudo == "6" ~ "NA"
))
# Igualar número de entradas em data.frames
data_q1[c(228:553),] <- NA
data_q1$mudanca_trab <- ifelse(data_q1$mudanca_trab == "", NA, data_q1$mudanca_trab)
data_q1$mudanca_trab <- ifelse(data_q1$mudanca_trab == "NA", NA, data_q1$mudanca_trab)
data_q1$mudanca_est <- ifelse(data_q1$mudanca_est == "", NA, data_q1$mudanca_est)
data_q1$mudanca_est <- ifelse(data_q1$mudanca_est == "NA", NA, data_q1$mudanca_est)
data_q1$apos_trab <- ifelse(data_q1$apos_trab == "", NA, data_q1$apos_trab)
data_q1$apos_trab <- ifelse(data_q1$apos_trab == "NA", NA, data_q1$apos_trab)
data_q1$apos_est <- ifelse(data_q1$apos_est == "", NA, data_q1$apos_est)
data_q1$apos_est <- ifelse(data_q1$apos_est == "NA", NA, data_q1$apos_est)
data_q2$mudanca_trab <- ifelse(data_q2$mudanca_trab == "", NA, data_q2$mudanca_trab)
data_q2$mudanca_trab <- ifelse(data_q2$mudanca_trab == "NA", NA, data_q2$mudanca_trab)
data_q2$mudanca_est <- ifelse(data_q2$mudanca_est == "", NA, data_q2$mudanca_est)
data_q2$mudanca_est <- ifelse(data_q2$mudanca_est == "NA", NA, data_q2$mudanca_est)
data_q2$apos_trab <- ifelse(data_q2$apos_trab == "", NA, data_q2$apos_trab)
data_q2$apos_trab <- ifelse(data_q2$apos_trab == "NA", NA, data_q2$apos_trab)
data_q2$apos_est <- ifelse(data_q2$apos_est == "", NA, data_q2$apos_est)
data_q2$apos_est <- ifelse(data_q2$apos_est == "NA", NA, data_q2$apos_est)
compativel_all <- data.frame(c(data_q1[,c(71:74)], data_q2[,c(111:114)]))
data_q1_x <- data_q1[,c(71:74)]
teste  <- apply(data_q1_x, 1, function(x) all(is.na(data_q1_x)))
data_q1_x <- data_q1_x[ !teste, ]
data_q2_x <- data_q2[,c(111:114)]
all <- rbind.data.frame(c(data_q1_x, data_q2_x))
View(data_q1)
View(data_q2)
write.csv(data_q1, "D:/Dropbox/Lili/questionario_01/data/data_q1.csv")
write.csv(data_q2, "D:/Dropbox/Lili/questionario_02/data/data_q2.csv")
View(data_q1)
install.packages("distill")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(kableExtra)
install.packages("kableExtra")
library(readxl)
library(kableExtra)
install.packages("vctrs")
library(readxl)
library(kableExtra)
library(dplyr)
library(tidyverse)
library(readr)
library(janitor)
library(stringi)
library(stringr)
library(ggplot2)
library(prettydoc)
library(reshape2)
library(hrbrthemes)
library(magrittr)
library(qwraps2)
#library(plyr)
library("magrittr")
library("ggplot2")
library("tidyr")
library("cowplot")
library(readr)
data_q1200611 <- read_csv("D:/Dropbox/01_transport_policy/questionario_01/data/jun/data_q1200611.csv")
View(data_q1200611)
library(readr)
data_q2_complete_200611 <- read_csv("D:/Dropbox/01_transport_policy/questionario_02/data/jun/data_q2_complete_200611.csv")
View(data_q2_complete_200611)
library(readxl)
data_comsp <- read_excel("D:/Google Drive/02_pesquisa/04_publicações/2020/JTG_SP_sprawl/review/data/data_comsp.xls")
View(data_comsp)
knitr::opts_chunk$set(echo = TRUE)
boxplot(m2$m2)
View(data_comsp)
data_comsp <- mutate(data_comsp, rate1992 = "1992"/pop_1992)
library(dplyr)
data_comsp <- mutate(data_comsp, rate1992 = "1992"/pop_1992)
data_comsp <- mutate(data_comsp, rate1992 = 1992/pop_1992)
View(data_comsp)
lm <- lm(1992~rate1992)
lm <- lm(1992~rate1992, data=data_comsp)
library(readr)
space_time_comsp <- read_csv("D:/Google Drive/02_pesquisa/04_publicações/2020/JTG_SP_sprawl/review/mapas/space_time_comsp.csv")
View(space_time_comsp)
data_comsp <- mudate(data_comsp, rate1992=NA)
data_comsp <- mutate(data_comsp, rate1992=NA)
View(data_comsp)
data_comsp$rate1992 <- data_comsp[,14]/data_comsp[,6]
View(data_comsp)
data_comsp <- mutate(data_comsp, rate2001=NA)
data_comsp$rate2001 <- data_comsp[,15]/data_comsp[,7]
data_comsp <- mutate(data_comsp, rate2010=NA)
data_comsp$rate2010 <- data_comsp[,16]/data_comsp[,8]
data_comsp <- mutate(data_comsp, rate2017=NA)
data_comsp$rate2017 <- data_comsp[,17]/data_comsp[,9]
View(data_comsp)
boxplot(data_comsp$rate1992)
cor(data_comsp)
cor(data_comsp$Distance_GRU,data_comsp$/rate2017)
cor(data_comsp$Distance_GRU,data_comsp$rate2017)
cor(data_comsp$Distance_GRU,data_comsp$rate1992)
cor(data_comsp$PIB_16,data_comsp$rate1992)
cor(data_comsp$rate2017,data_comsp$roubo)
cor(data_comsp$rate2017,data_comsp$roubo)
uns=rep(1,32)
uns
class(uns)
library(readxl)
RendaConsumo <- read_excel("D:/Dropbox/ensino/curso_r_processos_urbanos/dados/RendaConsumo.xlsx")
View(RendaConsumo)
class(RendaConsumo)
class(RendaConsumo$Ano)
class(RendaConsumo$`DCP(Y)`)
as.numeric(RendaConsumo$`DCP(Y)`)
print(RendaConsumo$`PIB(X)`)
print(RendaConsumo$`DCP(Y)`
print(RendaConsumo$`DCP(Y)`)
as.data.frame(RendaConsumo)
print(RendaConsumo$`PIB(X)`)
class(RendaConsumo$`DCP(Y)`)
as.data.frame(RendaConsumo)
as.numeric(RendaConsumo)
as.matrix(RendaConsumo)
x <- as.numeric(RendaConsumo)
x <- as.numeric(RendaConsumo$`DCP(Y)`)
write.csv(RendaConsumo, "D:/Dropbox/RendaConsumo.csv")
library(readr)
RendaConsumo <- read_csv("D:/Dropbox/RendaConsumo.csv")
View(RendaConsumo)
RendaConsumo[,-1]
data = RendaConsumo[,-1]
write.csv(data, "D:/Dropbox/RendaConsumo.csv")
class(Dados[,2])
class(data[,2])
data1 <- data[,2]
class(data1)
library(readr)
RendaConsumo <- read_csv("D:/Dropbox/RendaConsumo.csv")
View(RendaConsumo)
RendaConsumo<- RendaConsumo[,-1]
data <- RendaConsumo
t(data)
datat <- t(data)
datat <- as.matrix(t(data))
datat
View(datat)
dataa<- 1/data
1/(datat*data)*datat
Y=as.numeric(Dados[,2])
y <- data[,2]
1/(datat*data)*datat*y
(datat*data)^-1*datat*y
((datat*data)^-1)*datat*y
datat
datat <- as.data.frame(datat)
datat*data
z <- solve(data)
z <- solve(datat*data)
class(data)
class(datat)
data <- as.data.frame(data)
class(datat)
datat <- as.data.frame(datat)
class(data)
z <- solve(datat*data)
datat
dim(datat)
dim(data)
class(datat)
class(data)
datat %*% data
datat \*\ data
datat /*/ data
z <- datat %*% data
datat /*/ data
z <- datat %*% data
class(data$`DCP(Y)`)
class(data$Ano
class(data$Ano)
class(data$`PIB(X)`)
data <- as.matrix(data)
datat <- as.matrix(datat)
z <- datat %*% data
View(z)
Ah.....
View(dataa)
View(RendaConsumo)
data = RendaConsumo[,-1]
View(data)
class(data)
data = as.matrix(data)
class(data)
datat = t(data)
datat
datat = as.matrix(datat)
class(datat)
View(datat)
z <- datat %*% data
View(z)
z <- datat /*/ data
w <- solve(z)*datat
y <- data[,1]
w <- solve(z)*datat*y
y <- as.matrix(y)
w <- solve(z)*datat*y
w <- solve(z)
w <- solve(z)%*%datat%*%y
w
View(w)
w <- solve(z)
final <- w %*% datat %*% y
View(final)
knitr::include_graphics('img/maslow.jpg')
library(slidify)
author("Urban Analytics")
